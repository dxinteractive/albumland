{"version":3,"sources":["../../albumland-ui/src/AppWrapper.tsx","../../albumland-ui/src/component/LoaderPane.tsx","../../albumland-ui/src/component/Text.tsx","../../albumland-ui/src/layout/Layout.ts","../../albumland-ui/src/hooks/useWindowLoaded.ts","../../albumland-ui/src/Albumland.tsx","reportWebVitals.ts","index.tsx"],"names":["GlobalStyle","createGlobalStyle","props","theme","colors","background","text","normal","fontSizes","baseSmall","breakpoints","sm","base","lg","baseBig","md","xl","textStyles","logo","fontSize","fontWeight","lineHeight","AppWrapper","children","rel","href","fadeIn","keyframes","LoaderPane","styled","div","height","loaded","css","Text","span","textStyle","typography","space","colorSystem","styledProps","compose","color","layout","flexbox","grid","border","position","Box","windowLoadPromise","Promise","resolve","window","addEventListener","handleLoad","removeEventListener","supabase","createClient","Albumland","useState","setLoaded","useEffect","a","document","fonts","ready","useWindowLoaded","AlbumlandApp","auth","user","console","log","from","select","data","error","p","as","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"2vEAIA,IAAMA,EAAcC,YAAH,KAsDW,SAACC,GAAD,OAAgBA,EAAMC,MAAMC,OAAOC,cAC9C,SAACH,GAAD,OAAgBA,EAAMC,MAAMC,OAAOE,KAAKC,UAEpC,SAACL,GAAD,OAAgBA,EAAMC,MAAMK,UAAUC,aAC9B,SAACP,GAAD,OAAgBA,EAAMC,MAAMO,YAAYC,MAC5C,SAACT,GAAD,OAAgBA,EAAMC,MAAMK,UAAUI,QAElC,SAACV,GAAD,OAAgBA,EAAMC,MAAMO,YAAYG,MAC5C,SAACX,GAAD,OAAgBA,EAAMC,MAAMK,UAAUM,WAqBzDJ,EAAmB,CAAC,QAAS,QAAS,SAAU,UAGtDA,EAAYC,GAAKD,EAAY,GAC7BA,EAAYK,GAAKL,EAAY,GAC7BA,EAAYG,GAAKH,EAAY,GAC7BA,EAAYM,GAAKN,EAAY,GAE7B,IAAMP,EAAQ,CACVO,cACAF,UAAW,CACPC,UAAW,OACXG,KAAM,OACNE,QAAS,QAEbV,OAAQ,CACJC,WAAY,CACRE,OAAQ,WAEZD,KAAM,CACFC,OAAQ,YAGhBU,WAAY,CACRC,KAAM,CACFC,SAAU,OACVC,WAAY,IACZC,WAAY,WASjB,SAASC,EAAWpB,GAAmC,IACnDqB,EAAYrB,EAAZqB,SACP,OAAO,qCACH,sBAAMC,IAAI,aAAaC,KAAK,8BAC5B,sBAAMA,KAAK,2EAA2ED,IAAI,eAC1F,eAAC,IAAD,CAAerB,MAAOA,EAAtB,UACI,cAACH,EAAD,IACCuB,Q,oWC9Hb,IAAMG,EAASC,YAAH,KAgBCC,EAAaC,IAAOC,IAAV,KACT,SAAC5B,GAAD,OAAkBA,EAAM6B,UAEhC,SAAC7B,GAAD,OAAkBA,EAAM8B,OAASC,YAAf,IAAgCP,GAAhC,M,kHCpBjB,IAAMQ,EAAOL,IAAOM,KAAV,IACXC,IACAC,IACAC,IACAC,K,oLCON,IAAMC,EAAcC,YAChBH,IACAI,IACAC,IACAC,IACAC,IACAxC,IACAyC,IACAC,KAGSC,EAAMnB,IAAOC,IAAV,IACVU,G,GAGcX,IAAOC,IAAV,IAEXU,G,OC7BAS,EAAoB,IAAIC,SAAQ,SAAAC,GAKlCC,OAAOC,iBAAiB,QAJL,SAAbC,IACFF,OAAOG,oBAAoB,OAAQD,GACnCH,EAAQ,Y,QCKVK,EAAWC,YAAa,2CAA4C,uJAEnE,SAASC,IACZ,IAAM1B,EDHqB,WAAgB,IAAD,EAEd2B,oBAAS,GAFK,mBAEnC3B,EAFmC,KAE3B4B,EAF2B,KAY1C,OARAC,qBAAU,WACN,sBAAC,sBAAAC,EAAA,sEACSb,EADT,uBAEUc,SAAiBC,MAAMC,MAFjC,OAGGL,GAAU,GAHb,0CAAD,KAKD,IAEI5B,ECTQkC,GAEf,OAAO,cAAC5C,EAAD,UACH,cAACM,EAAD,CAAYG,OAAO,QAAQC,OAAQA,EAAnC,SACI,cAACmC,EAAD,QAKL,SAASA,IAiBZ,OAhBAN,qBAAU,WACN,sBAAC,kCAAAC,EAAA,sEACsBN,EAASY,KAAKC,OADpC,cACSA,EADT,OAGGC,QAAQC,IAAI,OAAQF,GAHvB,SAOiCb,EACzBgB,KAAK,UACLC,OAFyB,KAPjC,gBAOWC,EAPX,EAOWA,KAAMC,EAPjB,EAOiBA,MAIdL,QAAQC,IAAI,cAAeG,EAAMC,GAXpC,2CAAD,KAaD,IAEI,cAAC3B,EAAD,UACH,cAACA,EAAD,CAAK4B,EAAG,EAAR,SAAW,cAAC1C,EAAD,CAAM2C,GAAG,KAAKzC,UAAU,OAAxB,2BCtCnB,IAYe0C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC/B,EAAD,MAEFK,SAAS2B,eAAe,SAM1BZ,M","file":"static/js/main.6938a484.chunk.js","sourcesContent":["import React from 'react';\n\nimport {ThemeProvider, createGlobalStyle} from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n    html, body, div, span, applet, object, iframe,\n    h1, h2, h3, h4, h5, h6, p, blockquote, pre,\n    a, abbr, acronym, address, big, cite, code,\n    del, dfn, em, img, ins, kbd, q, s, samp,\n    small, strike, strong, sub, sup, tt, var,\n    b, u, i, center,\n    dl, dt, dd, ol, ul, li,\n    fieldset, form, label, legend,\n    table, caption, tbody, tfoot, thead, tr, th, td,\n    article, aside, canvas, details, embed,\n    figure, figcaption, footer, header, hgroup,\n    menu, nav, output, ruby, section, summary,\n    time, mark, audio, video {\n        margin: 0;\n        padding: 0;\n        border: 0;\n        font-size: 100%;\n        font: inherit;\n        vertical-align: baseline;\n    }\n    article, aside, details, figcaption, figure,\n    footer, header, hgroup, menu, nav, section {\n        display: block;\n    }\n    body {\n        line-height: 1;\n    }\n    ol, ul {\n        list-style: none;\n    }\n    blockquote, q {\n        quotes: none;\n    }\n    blockquote:before, blockquote:after,\n    q:before, q:after {\n        content: '';\n        content: none;\n    }\n    table {\n        border-collapse: collapse;\n        border-spacing: 0;\n    }\n    * {\n        box-sizing: border-box;\n    }\n\n    html {\n        font-family: 'Eczar', sans-serif;\n        height: 100%;\n        line-height: 1.5em;\n        position: relative;\n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n        background-color: ${(props: any) => props.theme.colors.background};\n        color: ${(props: any) => props.theme.colors.text.normal};\n\n        font-size: ${(props: any) => props.theme.fontSizes.baseSmall};\n        @media (min-width: ${(props: any) => props.theme.breakpoints.sm}) {\n            font-size: ${(props: any) => props.theme.fontSizes.base};\n        }\n        @media (min-width: ${(props: any) => props.theme.breakpoints.lg}) {\n            font-size: ${(props: any) => props.theme.fontSizes.baseBig};\n        }\n    }\n\n    body {\n        font-weight: 400;\n        height: 100%;\n        line-height: 1.5em;\n        overflow-x: hidden;\n        text-rendering: optimizelegibility;\n\n        &[aria-hidden='true'] {\n            overflow: hidden;\n        }\n    }\n\n    #root {\n        height: 100%;\n    }\n`;\n\nconst breakpoints: any = ['575px', '720px', '1000px', '1600px'];\n\n// Named aliases so we dont have to use array order in layout components\nbreakpoints.sm = breakpoints[0];\nbreakpoints.md = breakpoints[1];\nbreakpoints.lg = breakpoints[2];\nbreakpoints.xl = breakpoints[3];\n\nconst theme = {\n    breakpoints,\n    fontSizes: {\n        baseSmall: '14px',\n        base: '16px',\n        baseBig: '18px'\n    },\n    colors: {\n        background: {\n            normal: '#FFFFFF'\n        },\n        text: {\n            normal: '#333333'\n        }\n    },\n    textStyles: {\n        logo: {\n            fontSize: '3rem',\n            fontWeight: 700,\n            lineHeight: '1.5em'\n        }\n    }\n};\n\ntype Props = {\n    children: React.ReactNode\n};\n\nexport function AppWrapper(props: Props): React.ReactElement {\n    const {children} = props;\n    return <>\n        <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" />\n        <link href=\"https://fonts.googleapis.com/css2?family=Eczar:wght@400;700&display=swap\" rel=\"stylesheet\" />\n        <ThemeProvider theme={theme}>\n            <GlobalStyle />\n            {children}\n        </ThemeProvider>\n    </>;\n}\n","import type React from 'react';\nimport styled, {css, keyframes} from 'styled-components';\nimport {Box} from '../layout/Layout';\n\nconst fadeIn = keyframes`\n  from {\n    opacity: 0;\n  }\n\n  to {\n    opacity: 1;\n  }\n`;\n\ntype Props = {\n    readonly loaded: boolean;\n    readonly height: string;\n    readonly children: React.ReactNode;\n};\n\nexport const LoaderPane = styled.div<Props>`\n    height: ${(props: Props) => props.height};\n    opacity: 0;\n    ${(props: Props) => props.loaded ? css`animation: ${fadeIn} .1s ease-out forwards;` : ``}\n`;\n","import styled from 'styled-components';\nimport {space, textStyle, typography, color as colorSystem} from 'styled-system';\n\nexport const Text = styled.span`\n    ${textStyle}\n    ${typography}\n    ${space}\n    ${colorSystem}\n`;\n","import styled from 'styled-components';\n\nimport {\n    space,\n    color,\n    layout,\n    flexbox,\n    grid,\n    background,\n    border,\n    position,\n    compose\n} from 'styled-system';\n\nconst styledProps = compose(\n    space,\n    color,\n    layout,\n    flexbox,\n    grid,\n    background,\n    border,\n    position\n);\n\nexport const Box = styled.div<any>`\n    ${styledProps}\n`;\n\nexport const Flex = styled.div<any>`\n    display: flex;\n    ${styledProps}\n`;\n","import {useState, useEffect} from 'react';\n\nconst windowLoadPromise = new Promise(resolve => {\n    const handleLoad = () => {\n        window.removeEventListener('load', handleLoad);\n        resolve(null);\n    };\n    window.addEventListener('load', handleLoad);\n});\n\nexport const useWindowLoaded = (): boolean => {\n\n    const [loaded, setLoaded] = useState(false);\n\n    useEffect(() => {\n        (async () => {\n            await windowLoadPromise;\n            await (document as any).fonts.ready;\n            setLoaded(true);\n        })();\n    }, []);\n\n    return loaded;\n};\n","import React, {useEffect} from 'react';\nimport {AppWrapper} from './AppWrapper';\nimport {LoaderPane} from './component/LoaderPane';\nimport {Text} from './component/Text';\nimport {Box} from './layout/Layout';\n\nimport {useWindowLoaded} from './hooks/useWindowLoaded';\n// import {useDendriform, useInput} from 'dendriform';\n\nimport { createClient } from '@supabase/supabase-js';\nconst supabase = createClient('https://gbrhbykyaqpnxvnumvho.supabase.co', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImlhdCI6MTYxMjU3MjY0MiwiZXhwIjoxOTI4MTQ4NjQyfQ.2UidlWcBDwkMfdJZht72skSssfgsukkw9NfdoCSoisM');\n\nexport function Albumland(): React.ReactElement {\n    const loaded = useWindowLoaded();\n\n    return <AppWrapper>\n        <LoaderPane height=\"100vh\" loaded={loaded}>\n            <AlbumlandApp />\n        </LoaderPane>\n    </AppWrapper>;\n};\n\nexport function AlbumlandApp(): React.ReactElement {\n    useEffect(() => {\n        (async () => {\n            const user = await supabase.auth.user();\n\n            console.log('user', user);\n\n            //  supabase.auth.signOut()\n\n            const { data, error } = await supabase\n                .from('albums')\n                .select(`*`);\n\n            console.log('data, error', data, error);\n        })();\n    }, []);\n\n    return <Box>\n        <Box p={3}><Text as=\"h1\" textStyle=\"logo\">Albumland</Text></Box>\n    </Box>;\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Albumland} from '@albumland/albumland-ui';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Albumland />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}